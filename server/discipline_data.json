{
    "ПиОА": {
        "disciplineId": "%D0%9F%D0%B8%D0%9E%D0%90",
        "dataTree": {
            "trees": [
                {
                    "root": {
                        "id": "Синтаксис-0_2",
                        "type": "Rewritable",
                        "data": {
                            "id": "Синтаксис-0_2",
                            "inside": "\n\nЦель дисциплины:\n\nРазвитие интереса к современным средам программирования и их практическому применению, формирование навыка самостоятельного выполнения поставленных задач, развития умений и навыков программирования.\n\nЗадачи дисциплины:\n\nФормирование знаний об основных синтаксических и алгоритмических конструкций языка программирования Python. Формирование понятия алгоритма и основных требований методологии программирования, как технологической основы разработки качественных программных компонентов, основ объектно-ориентированного программирования. Изучение базовых структур данных и использование их для построения алгоритма. Привитие навыков эффективного решения практических задач с использованием языка программирования Python.\n\n",
                            "label": "Синтаксис",
                            "text": "МУП Core 2022 Python 1 Программирование и основы алгоритмизации 1"
                        },
                        "position": {
                            "x": 4352,
                            "y": 192
                        },
                        "children": [
                            {
                                "id": "Rewritable_17",
                                "type": "Rewritable",
                                "data": {
                                    "id": "Rewritable_17",
                                    "inside": "Лекция будет посвящена основам языка Python, его философии и ключевым принципам. Будут рассмотрены основные элементы языка, такие как переменные, типы данных, операторы, и базовые структуры. Студенты узнают о том, как организована программа на Python, и получат представление о синтаксисе и семантике языка.",
                                    "label": "Rewritable",
                                    "practice": [],
                                    "text": "УВ №1, Лекционное занятие 1, \"Основные принципы организации Языка Python. Базовые элементы.",
                                    "theory": []
                                },
                                "position": {
                                    "x": 880,
                                    "y": 848
                                },
                                "children": [
                                    {
                                        "children": [
                                            {
                                                "children": [
                                                    {
                                                        "children": [],
                                                        "data": {
                                                            "label": "Операции с переменными",
                                                            "text": "Операции с переменными",
                                                            "type": "Rewritable",
                                                            "inside": "Операции с переменными в Python позволяют выполнять различные действия над данными, хранящимися в переменных. В Python доступны основные арифметические операции, такие как сложение (+), вычитание (-), умножение (*), деление (/), а также операции над строками, списками и другими типами данных.",
                                                            "theory": [
                                                                "Типы данных в Python (например, int, float, str).",
                                                                "Синтаксис операций с переменными."
                                                            ],
                                                            "practice": [
                                                                "Выполнять базовые арифметические операции с переменными.",
                                                                "Использовать операции сравнения для сравнения значений переменных."
                                                            ]
                                                        },
                                                        "id": "Операции с переменными-3_3",
                                                        "position": {
                                                            "x": 672,
                                                            "y": 1824
                                                        },
                                                        "type": "Rewritable"
                                                    },
                                                    {
                                                        "children": [],
                                                        "data": {
                                                            "label": "Конвертация типов",
                                                            "text": "Конвертация типов",
                                                            "inside": "Конвертация типов в Python - это процесс изменения типа данных переменной из одного типа в другой. Это полезно, когда необходимо выполнить операции между переменными разных типов или привести данные к нужному формату.",
                                                            "practice": [
                                                                "Различные типы данных в Python (например, int, float, str).",
                                                                "Какие типы данных могут быть сконвертированы друг в друга без потери данных (например, целые числа во float)."
                                                            ],
                                                            "theory": [
                                                                "Производить конвертацию типов данных при необходимости."
                                                            ]
                                                        },
                                                        "id": "Конвертация типов-4_4",
                                                        "position": {
                                                            "x": 928,
                                                            "y": 1824
                                                        },
                                                        "type": "Rewritable"
                                                    }
                                                ],
                                                "data": {
                                                    "label": "Переменные и типы данных",
                                                    "text": "Переменные и типы данных",
                                                    "inside": "Переменные в Python - это именованные места для хранения данных. Каждая переменная имеет свое имя и значение, которое может быть любого типа данных, такого как целое число, число с плавающей точкой, строка и другие.",
                                                    "practice": [
                                                        "Как создавать переменные в Python.",
                                                        "Различные типы данных в Python (например, int, float, str, bool, list, tuple, dict)."
                                                    ],
                                                    "theory": [
                                                        "Объявлять переменные и присваивать им значения.",
                                                        "Понимать различия между типами данных и выбирать подходящий тип для конкретной ситуации."
                                                    ]
                                                },
                                                "id": "Переменные и типы данных-1_1",
                                                "position": {
                                                    "x": 800,
                                                    "y": 1568
                                                },
                                                "type": "Rewritable"
                                            },
                                            {
                                                "children": [],
                                                "data": {
                                                    "label": "Основные операторы",
                                                    "text": "Основные операторы",
                                                    "inside": "Операторы в Python - это символы, которые выполняют операции над одним или несколькими операндами. Основные операторы включают арифметические операторы, операторы сравнения, логические операторы, операторы присваивания и операторы принадлежности.",
                                                    "practice": [
                                                        "Различные типы операторов в Python.",
                                                        "Какие операторы выполняют определенные операции (например, арифметические операторы для выполнения математических операций)."
                                                    ],
                                                    "theory": [
                                                        "Применять операторы для выполнения различных операций в коде.",
                                                        "Понимать приоритет операторов и использовать скобки для управления порядком выполнения операций."
                                                    ]
                                                },
                                                "id": "Основные операторы-2_2",
                                                "position": {
                                                    "x": 1056,
                                                    "y": 1568
                                                },
                                                "type": "Rewritable"
                                            }
                                        ],
                                        "data": {
                                            "label": "Основы Python",
                                            "text": "Основы Python"
                                        },
                                        "id": "Основы Python-0_0",
                                        "position": {
                                            "x": 880,
                                            "y": 1312
                                        },
                                        "type": "Rewritable"
                                    }
                                ]
                            },
                            {
                                "id": "Rewritable_18",
                                "type": "Rewritable",
                                "data": {
                                    "id": "Rewritable_18",
                                    "text": "УВ №2, Практическое занятие 1, \"Основные принципы организации Языка Python. Базовые элементы.",
                                    "label": "Rewritable",
                                    "inside": "Создание и использование переменных. В этой практике студенты научатся объявлять переменные различных типов (целые числа, числа с плавающей точкой, строки) и выполнять с ними простые операции (сложение, умножение, конкатенация строк и т.д.).",
                                    "practice": [],
                                    "theory": []
                                },
                                "position": {
                                    "x": 1072,
                                    "y": 848
                                },
                                "children": [
                                    {
                                        "id": "Переменные и типы данных-0_14",
                                        "type": "Rewritable",
                                        "data": {
                                            "label": "Переменные и типы данных",
                                            "text": "Переменные и типы данных",
                                            "inside": "Переменные в Python - это именованные места для хранения данных. Каждая переменная имеет свое имя и значение, которое может быть любого типа данных, такого как целое число, число с плавающей точкой, строка и другие.",
                                            "practice": [
                                                "Как создавать переменные в Python.",
                                                "Различные типы данных в Python (например, int, float, str, bool, list, tuple, dict)."
                                            ],
                                            "theory": [
                                                "Объявлять переменные и присваивать им значения.",
                                                "Понимать различия между типами данных и выбирать подходящий тип для конкретной ситуации."
                                            ]
                                        },
                                        "position": {
                                            "x": 1072,
                                            "y": 1264
                                        },
                                        "children": [
                                            {
                                                "id": "Операции с переменными-1_15",
                                                "type": "Rewritable",
                                                "data": {
                                                    "label": "Операции с переменными",
                                                    "text": "Операции с переменными",
                                                    "inside": "Операции с переменными в Python позволяют выполнять различные действия над данными, хранящимися в переменных. В Python доступны основные арифметические операции, такие как сложение (+), вычитание (-), умножение (*), деление (/), а также операции над строками, списками и другими типами данных.",
                                                    "theory": [
                                                        "Типы данных в Python (например, int, float, str).",
                                                        "Синтаксис операций с переменными."
                                                    ],
                                                    "practice": [
                                                        "Выполнять базовые арифметические операции с переменными.",
                                                        "Использовать операции сравнения для сравнения значений переменных."
                                                    ]
                                                },
                                                "position": {
                                                    "x": 944,
                                                    "y": 1520
                                                },
                                                "children": []
                                            },
                                            {
                                                "id": "Конвертация типов-2_16",
                                                "type": "Rewritable",
                                                "data": {
                                                    "label": "Конвертация типов",
                                                    "text": "Конвертация типов",
                                                    "inside": "Конвертация типов в Python - это процесс изменения типа данных переменной из одного типа в другой. Это полезно, когда необходимо выполнить операции между переменными разных типов или привести данные к нужному формату.",
                                                    "practice": [
                                                        "Различные типы данных в Python (например, int, float, str).",
                                                        "Какие типы данных могут быть сконвертированы друг в друга без потери данных (например, целые числа во float)."
                                                    ],
                                                    "theory": [
                                                        "Производить конвертацию типов данных при необходимости."
                                                    ]
                                                },
                                                "position": {
                                                    "x": 1200,
                                                    "y": 1520
                                                },
                                                "children": []
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "id": "Rewritable_19",
                                "type": "Rewritable",
                                "data": {
                                    "id": "Rewritable_19",
                                    "inside": "Работа с типами данных. Вторая практика сосредоточится на конвертации типов данных, изучении встроенных функций Python для работы с числами и строками. Студенты научатся использовать функции типа int(), float(), str() и другие.\n\n",
                                    "label": "Rewritable",
                                    "text": "УВ №3, Практическое занятие 2, \"Основные принципы организации Языка Python. Базовые элементы "
                                },
                                "position": {
                                    "x": 1264,
                                    "y": 848
                                },
                                "children": [
                                    {
                                        "id": "Переменные и типы данных-0_19",
                                        "type": "Rewritable",
                                        "data": {
                                            "label": "Переменные и типы данных",
                                            "text": "Переменные и типы данных",
                                            "inside": "Переменные в Python - это именованные места для хранения данных. Каждая переменная имеет свое имя и значение, которое может быть любого типа данных, такого как целое число, число с плавающей точкой, строка и другие.",
                                            "practice": [
                                                "Как создавать переменные в Python.",
                                                "Различные типы данных в Python (например, int, float, str, bool, list, tuple, dict)."
                                            ],
                                            "theory": [
                                                "Объявлять переменные и присваивать им значения.",
                                                "Понимать различия между типами данных и выбирать подходящий тип для конкретной ситуации."
                                            ]
                                        },
                                        "position": {
                                            "x": 1216,
                                            "y": 1328
                                        },
                                        "children": [
                                            {
                                                "id": "Операции с переменными-1_20",
                                                "type": "Rewritable",
                                                "data": {
                                                    "label": "Операции с переменными",
                                                    "text": "Операции с переменными",
                                                    "inside": "Операции с переменными в Python позволяют выполнять различные действия над данными, хранящимися в переменных. В Python доступны основные арифметические операции, такие как сложение (+), вычитание (-), умножение (*), деление (/), а также операции над строками, списками и другими типами данных.",
                                                    "theory": [
                                                        "Типы данных в Python (например, int, float, str).",
                                                        "Синтаксис операций с переменными."
                                                    ],
                                                    "practice": [
                                                        "Выполнять базовые арифметические операции с переменными.",
                                                        "Использовать операции сравнения для сравнения значений переменных."
                                                    ]
                                                },
                                                "position": {
                                                    "x": 1088,
                                                    "y": 1584
                                                },
                                                "children": []
                                            },
                                            {
                                                "id": "Конвертация типов-2_21",
                                                "type": "Rewritable",
                                                "data": {
                                                    "label": "Конвертация типов",
                                                    "text": "Конвертация типов",
                                                    "inside": "Конвертация типов в Python - это процесс изменения типа данных переменной из одного типа в другой. Это полезно, когда необходимо выполнить операции между переменными разных типов или привести данные к нужному формату.",
                                                    "practice": [
                                                        "Различные типы данных в Python (например, int, float, str).",
                                                        "Какие типы данных могут быть сконвертированы друг в друга без потери данных (например, целые числа во float)."
                                                    ],
                                                    "theory": [
                                                        "Производить конвертацию типов данных при необходимости."
                                                    ]
                                                },
                                                "position": {
                                                    "x": 1344,
                                                    "y": 1584
                                                },
                                                "children": []
                                            }
                                        ]
                                    },
                                    {
                                        "id": "Основные операторы-0_24",
                                        "type": "Rewritable",
                                        "data": {
                                            "label": "Основные операторы",
                                            "text": "Основные операторы",
                                            "inside": "Операторы в Python - это символы, которые выполняют операции над одним или несколькими операндами. Основные операторы включают арифметические операторы, операторы сравнения, логические операторы, операторы присваивания и операторы принадлежности.",
                                            "practice": [
                                                "Различные типы операторов в Python.",
                                                "Какие операторы выполняют определенные операции (например, арифметические операторы для выполнения математических операций)."
                                            ],
                                            "theory": [
                                                "Применять операторы для выполнения различных операций в коде.",
                                                "Понимать приоритет операторов и использовать скобки для управления порядком выполнения операций."
                                            ]
                                        },
                                        "position": {
                                            "x": 1424,
                                            "y": 1328
                                        },
                                        "children": []
                                    }
                                ]
                            },
                            {
                                "id": "Rewritable_20",
                                "type": "Rewritable",
                                "data": {
                                    "id": "Rewritable_20",
                                    "inside": "Операторы и выражения. В этой практике студенты будут решать задачи, использующие арифметические, логические и сравнительные операторы. Цель - закрепить понимание того, как Python обрабатывает различные виды выражений.",
                                    "label": "Rewritable",
                                    "text": "УВ №4, Практическое занятие 3, \"Основные принципы организации Языка Python. Базовые элементы "
                                },
                                "position": {
                                    "x": 1456,
                                    "y": 848
                                },
                                "children": [
                                    {
                                        "id": "Переменные и типы данных-0_0",
                                        "type": "Rewritable",
                                        "data": {
                                            "id": "Переменные и типы данных-0_0",
                                            "label": "Переменные и типы данных",
                                            "text": "Переменные и типы данных",
                                            "inside": "Переменные в Python - это именованные места для хранения данных. Каждая переменная имеет свое имя и значение, которое может быть любого типа данных, такого как целое число, число с плавающей точкой, строка и другие.",
                                            "practice": [
                                                "Как создавать переменные в Python.",
                                                "Различные типы данных в Python (например, int, float, str, bool, list, tuple, dict)."
                                            ],
                                            "theory": [
                                                "Объявлять переменные и присваивать им значения.",
                                                "Понимать различия между типами данных и выбирать подходящий тип для конкретной ситуации."
                                            ]
                                        },
                                        "position": {
                                            "x": 1360,
                                            "y": 1312
                                        },
                                        "children": [
                                            {
                                                "id": "Операции с переменными-1_1",
                                                "type": "Rewritable",
                                                "data": {
                                                    "label": "Операции с переменными",
                                                    "text": "Операции с переменными",
                                                    "inside": "Операции с переменными в Python позволяют выполнять различные действия над данными, хранящимися в переменных. В Python доступны основные арифметические операции, такие как сложение (+), вычитание (-), умножение (*), деление (/), а также операции над строками, списками и другими типами данных.",
                                                    "theory": [
                                                        "Типы данных в Python (например, int, float, str).",
                                                        "Синтаксис операций с переменными."
                                                    ],
                                                    "practice": [
                                                        "Выполнять базовые арифметические операции с переменными.",
                                                        "Использовать операции сравнения для сравнения значений переменных."
                                                    ]
                                                },
                                                "position": {
                                                    "x": 1216,
                                                    "y": 1552
                                                },
                                                "children": []
                                            },
                                            {
                                                "id": "Конвертация типов-2_2",
                                                "type": "Rewritable",
                                                "data": {
                                                    "id": "Конвертация типов-2_2",
                                                    "label": "Конвертация типов",
                                                    "text": "Конвертация типов",
                                                    "inside": "Конвертация типов в Python - это процесс изменения типа данных переменной из одного типа в другой. Это полезно, когда необходимо выполнить операции между переменными разных типов или привести данные к нужному формату.",
                                                    "practice": [
                                                        "Различные типы данных в Python (например, int, float, str).",
                                                        "Какие типы данных могут быть сконвертированы друг в друга без потери данных (например, целые числа во float)."
                                                    ],
                                                    "theory": [
                                                        "Производить конвертацию типов данных при необходимости."
                                                    ]
                                                },
                                                "position": {
                                                    "x": 1472,
                                                    "y": 1552
                                                },
                                                "children": []
                                            }
                                        ]
                                    },
                                    {
                                        "id": "Основные операторы-0_36",
                                        "type": "Rewritable",
                                        "data": {
                                            "label": "Основные операторы",
                                            "text": "Основные операторы",
                                            "inside": "Операторы в Python - это символы, которые выполняют операции над одним или несколькими операндами. Основные операторы включают арифметические операторы, операторы сравнения, логические операторы, операторы присваивания и операторы принадлежности.",
                                            "theory": [
                                                "Различные типы операторов в Python.",
                                                "Какие операторы выполняют определенные операции (например, арифметические операторы для выполнения математических операций)."
                                            ],
                                            "practice": [
                                                "Применять операторы для выполнения различных операций в коде.",
                                                "Понимать приоритет операторов и использовать скобки для управления порядком выполнения операций."
                                            ]
                                        },
                                        "position": {
                                            "x": 1568,
                                            "y": 1312
                                        },
                                        "children": []
                                    }
                                ]
                            },
                            {
                                "id": "Rewritable_21",
                                "type": "Rewritable",
                                "data": {
                                    "id": "Rewritable_21",
                                    "inside": "Лекция охватит основные управляющие конструкции в Python, такие как условные операторы (if, elif, else), циклы (for, while), и использование операторов break и continue. Будет также рассмотрена работа с логическими выражениями и циклами.",
                                    "label": "Rewritable",
                                    "text": "УВ №5, Лекционное занятие 2, \"Управляющие конструкции\""
                                },
                                "position": {
                                    "x": 1648,
                                    "y": 848
                                },
                                "children": [
                                    {
                                        "id": "Синтаксис-0_0",
                                        "type": "Rewritable",
                                        "data": {
                                            "label": "Синтаксис",
                                            "text": "Синтаксис",
                                            "inside": "Синтаксис в Python - это набор правил, определяющих структуру и правильное оформление программного кода на этом языке. Правильное использование синтаксиса является ключевым аспектом написания читаемого и исполняемого кода."
                                        },
                                        "position": {
                                            "x": 1648,
                                            "y": 1216
                                        },
                                        "children": [
                                            {
                                                "id": "Условные операторы-1_1",
                                                "type": "Rewritable",
                                                "data": {
                                                    "label": "Условные операторы",
                                                    "text": "Условные операторы",
                                                    "inside": "Условные операторы в Python используются для принятия решений на основе выполнения условий. Они позволяют выполнять определенные действия, если условие истинно, и другие действия, если условие ложно.",
                                                    "practice": [
                                                        "Писать условные выражения для проверки различных условий в коде.",
                                                        "Использовать условные операторы для выполнения различных действий в зависимости от результата проверки условий."
                                                    ],
                                                    "theory": [
                                                        "Как формулировать условия с помощью операторов сравнения (например, ==, <, >) и логических операторов (например, and, or, not)."
                                                    ]
                                                },
                                                "position": {
                                                    "x": 1200,
                                                    "y": 1472
                                                },
                                                "children": [
                                                    {
                                                        "id": "if-3_3",
                                                        "type": "Rewritable",
                                                        "data": {
                                                            "label": "if",
                                                            "text": "if",
                                                            "inside": "Условный оператор if в Python используется для выполнения определенного блока кода, если указанное условие истинно."
                                                        },
                                                        "position": {
                                                            "x": 944,
                                                            "y": 1728
                                                        },
                                                        "children": []
                                                    },
                                                    {
                                                        "id": "else-4_4",
                                                        "type": "Rewritable",
                                                        "data": {
                                                            "label": "else",
                                                            "text": "else",
                                                            "inside": "Условный оператор else в Python используется для выполнения блока кода, если условие, указанное в предшествующем операторе if, ложно."
                                                        },
                                                        "position": {
                                                            "x": 1200,
                                                            "y": 1728
                                                        },
                                                        "children": []
                                                    },
                                                    {
                                                        "id": "elif-5_5",
                                                        "type": "Rewritable",
                                                        "data": {
                                                            "label": "elif",
                                                            "text": "elif",
                                                            "inside": "Условный оператор elif в Python используется для проверки дополнительных условий в случае, если условие предшествующего оператора if оказывается ложным."
                                                        },
                                                        "position": {
                                                            "x": 1456,
                                                            "y": 1728
                                                        },
                                                        "children": []
                                                    }
                                                ]
                                            },
                                            {
                                                "id": "Циклы-2_2",
                                                "type": "Rewritable",
                                                "data": {
                                                    "label": "Циклы",
                                                    "text": "Циклы",
                                                    "inside": "Циклы в Python используются для повторения выполнения определенного блока кода несколько раз или до выполнения определенного условия. В Python доступны два основных типа циклов: цикл for и цикл while.",
                                                    "theory": [
                                                        "Структуру и синтаксис цикла for, который используется для итерации по элементам итерируемого объекта.",
                                                        "Структуру и синтаксис цикла while, который выполняет блок кода до тех пор, пока условие истинно.",
                                                        "Как использовать операторы break и continue для управления выполнением циклов."
                                                    ],
                                                    "practice": [
                                                        "Писать циклы for для выполнения действий над элементами итерируемых объектов.",
                                                        "Писать циклы while для выполнения блока кода до выполнения определенного условия.",
                                                        "Использовать операторы break и continue для управления выполнением циклов в зависимости от определенных условий"
                                                    ]
                                                },
                                                "position": {
                                                    "x": 2096,
                                                    "y": 1472
                                                },
                                                "children": [
                                                    {
                                                        "id": "for-6_6",
                                                        "type": "Rewritable",
                                                        "data": {
                                                            "label": "for",
                                                            "text": "for",
                                                            "inside": "Цикл for в Python используется для итерации по элементам итерируемого объекта, такого как список, кортеж, строка или другой итерируемый объект. Он выполняет блок кода для каждого элемента в последовательности."
                                                        },
                                                        "position": {
                                                            "x": 1712,
                                                            "y": 1728
                                                        },
                                                        "children": []
                                                    },
                                                    {
                                                        "id": "while-7_7",
                                                        "type": "Rewritable",
                                                        "data": {
                                                            "label": "while",
                                                            "text": "while",
                                                            "inside": "Цикл while в Python выполняет блок кода, пока условие остается истинным. Он используется, когда необходимо повторять выполнение кода до тех пор, пока условие остается истинным."
                                                        },
                                                        "position": {
                                                            "x": 1968,
                                                            "y": 1728
                                                        },
                                                        "children": []
                                                    },
                                                    {
                                                        "id": "Вложенные циклы-8_8",
                                                        "type": "Rewritable",
                                                        "data": {
                                                            "label": "Вложенные циклы",
                                                            "text": "Вложенные циклы",
                                                            "inside": "В Python можно использовать один цикл внутри другого, создавая так называемые вложенные циклы. Это позволяет повторять выполнение блока кода внутри внешнего цикла для каждой итерации внешнего цикла.",
                                                            "theory": [
                                                                "Понимать, что количество итераций внутреннего цикла будет зависеть от количества итераций внешнего цикла."
                                                            ],
                                                            "practice": [
                                                                "Писать вложенные циклы для обработки двумерных структур данных и выполнения различных операций для каждого элемента в этих структурах."
                                                            ]
                                                        },
                                                        "position": {
                                                            "x": 2224,
                                                            "y": 1728
                                                        },
                                                        "children": []
                                                    },
                                                    {
                                                        "id": "break и continue-9_9",
                                                        "type": "Rewritable",
                                                        "data": {
                                                            "label": "break и continue",
                                                            "text": "break и continue",
                                                            "inside": "Инструкции break и continue являются инструментами управления выполнением циклов в Python. Они позволяют изменять стандартное поведение циклов, прерывая выполнение цикла или переходя к следующей итерации в зависимости от определенных условий",
                                                            "theory": [
                                                                "break: Инструкция break используется для прерывания выполнения цикла и выхода из него, когда определенное условие выполняется.",
                                                                "continue: Инструкция continue используется для пропуска оставшейся части кода в текущей итерации цикла и перехода к следующей итерации."
                                                            ]
                                                        },
                                                        "position": {
                                                            "x": 2480,
                                                            "y": 1728
                                                        },
                                                        "children": []
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "id": "Rewritable_22",
                                "type": "Rewritable",
                                "data": {
                                    "id": "Rewritable_22",
                                    "inside": "Условные операторы. Студенты будут решать задачи, требующие применения условий. Это поможет им научиться строить логические ветвления в программах.",
                                    "label": "Rewritable",
                                    "text": "УВ №6, Практическое занятие 4, \"Управляющие конструкции\""
                                },
                                "position": {
                                    "x": 1840,
                                    "y": 848
                                },
                                "children": [
                                    {
                                        "id": "Условные операторы-0_19",
                                        "type": "Rewritable",
                                        "data": {
                                            "label": "Условные операторы",
                                            "text": "Условные операторы",
                                            "inside": "Условные операторы в Python используются для принятия решений на основе выполнения условий. Они позволяют выполнять определенные действия, если условие истинно, и другие действия, если условие ложно.",
                                            "practice": [
                                                "Писать условные выражения для проверки различных условий в коде.",
                                                "Использовать условные операторы для выполнения различных действий в зависимости от результата проверки условий."
                                            ],
                                            "theory": [
                                                "Как формулировать условия с помощью операторов сравнения (например, ==, <, >) и логических операторов (например, and, or, not)."
                                            ]
                                        },
                                        "position": {
                                            "x": 1840,
                                            "y": 1200
                                        },
                                        "children": [
                                            {
                                                "id": "if-1_20",
                                                "type": "Rewritable",
                                                "data": {
                                                    "label": "if",
                                                    "text": "if",
                                                    "inside": "Условный оператор if в Python используется для выполнения определенного блока кода, если указанное условие истинно."
                                                },
                                                "position": {
                                                    "x": 1632,
                                                    "y": 1488
                                                },
                                                "children": []
                                            },
                                            {
                                                "id": "else-2_21",
                                                "type": "Rewritable",
                                                "data": {
                                                    "label": "else",
                                                    "text": "else",
                                                    "inside": "Условный оператор else в Python используется для выполнения блока кода, если условие, указанное в предшествующем операторе if, ложно."
                                                },
                                                "position": {
                                                    "x": 1840,
                                                    "y": 1488
                                                },
                                                "children": []
                                            },
                                            {
                                                "id": "elif-3_22",
                                                "type": "Rewritable",
                                                "data": {
                                                    "label": "elif",
                                                    "text": "elif",
                                                    "inside": "Условный оператор elif в Python используется для проверки дополнительных условий в случае, если условие предшествующего оператора if оказывается ложным."
                                                },
                                                "position": {
                                                    "x": 2048,
                                                    "y": 1488
                                                },
                                                "children": []
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "id": "Rewritable_23",
                                "type": "Rewritable",
                                "data": {
                                    "id": "Rewritable_23",
                                    "inside": "Циклы for. Эта практика сфокусируется на использовании циклов for для перебора элементов в коллекциях (списках, строках, словарях и т.д.).",
                                    "label": "Rewritable",
                                    "text": "УВ №7, Практическое занятие 5, \"Управляющие конструкции\""
                                },
                                "position": {
                                    "x": 2032,
                                    "y": 848
                                },
                                "children": [
                                    {
                                        "id": "for-0_26",
                                        "type": "Rewritable",
                                        "data": {
                                            "label": "for",
                                            "text": "for",
                                            "inside": "Цикл for в Python используется для итерации по элементам итерируемого объекта, такого как список, кортеж, строка или другой итерируемый объект. Он выполняет блок кода для каждого элемента в последовательности."
                                        },
                                        "position": {
                                            "x": 2032,
                                            "y": 1200
                                        },
                                        "children": []
                                    }
                                ]
                            },
                            {
                                "id": "Rewritable_24",
                                "type": "Rewritable",
                                "data": {
                                    "id": "Rewritable_24",
                                    "inside": "Циклы while. Студенты будут изучать работу циклов while, их применение и основные методы контроля за бесконечными циклами.",
                                    "label": "Rewritable",
                                    "text": "УВ №8, Практическое занятие 6, \"Управляющие конструкции\""
                                },
                                "position": {
                                    "x": 2224,
                                    "y": 848
                                },
                                "children": [
                                    {
                                        "id": "while-0_27",
                                        "type": "Rewritable",
                                        "data": {
                                            "label": "while",
                                            "text": "while",
                                            "inside": "Цикл while в Python выполняет блок кода, пока условие остается истинным. Он используется, когда необходимо повторять выполнение кода до тех пор, пока условие остается истинным."
                                        },
                                        "position": {
                                            "x": 2224,
                                            "y": 1200
                                        },
                                        "children": []
                                    }
                                ]
                            },
                            {
                                "id": "Rewritable_25",
                                "type": "Rewritable",
                                "data": {
                                    "id": "Rewritable_25",
                                    "inside": "Вложенные циклы. Здесь студенты будут решать более сложные задачи, требующие использования вложенных циклов, что поможет им понять, как работают многомерные структуры данных.",
                                    "label": "Rewritable",
                                    "text": "УВ №9, Практическое занятие 7, \"Управляющие конструкции\""
                                },
                                "position": {
                                    "x": 2416,
                                    "y": 848
                                },
                                "children": [
                                    {
                                        "id": "Вложенные циклы-0_28",
                                        "type": "Rewritable",
                                        "data": {
                                            "label": "Вложенные циклы",
                                            "text": "Вложенные циклы",
                                            "inside": "В Python можно использовать один цикл внутри другого, создавая так называемые вложенные циклы. Это позволяет повторять выполнение блока кода внутри внешнего цикла для каждой итерации внешнего цикла.",
                                            "theory": [
                                                "Понимать, что количество итераций внутреннего цикла будет зависеть от количества итераций внешнего цикла."
                                            ],
                                            "practice": [
                                                "Писать вложенные циклы для обработки двумерных структур данных и выполнения различных операций для каждого элемента в этих структурах."
                                            ]
                                        },
                                        "position": {
                                            "x": 2416,
                                            "y": 1200
                                        },
                                        "children": []
                                    }
                                ]
                            },
                            {
                                "id": "Rewritable_26",
                                "type": "Rewritable",
                                "data": {
                                    "id": "Rewritable_26",
                                    "inside": "Операторы break и continue. В этой практике студенты научатся управлять потоком выполнения циклов с помощью операторов break и continue.",
                                    "label": "Rewritable",
                                    "text": "УВ №10, Практическое занятие 8, \"Управляющие конструкции\""
                                },
                                "position": {
                                    "x": 2608,
                                    "y": 848
                                },
                                "children": [
                                    {
                                        "id": "break и continue-0_29",
                                        "type": "Rewritable",
                                        "data": {
                                            "label": "break и continue",
                                            "text": "break и continue",
                                            "inside": "Инструкции break и continue являются инструментами управления выполнением циклов в Python. Они позволяют изменять стандартное поведение циклов, прерывая выполнение цикла или переходя к следующей итерации в зависимости от определенных условий",
                                            "theory": [
                                                "break: Инструкция break используется для прерывания выполнения цикла и выхода из него, когда определенное условие выполняется.",
                                                "continue: Инструкция continue используется для пропуска оставшейся части кода в текущей итерации цикла и перехода к следующей итерации."
                                            ]
                                        },
                                        "position": {
                                            "x": 2608,
                                            "y": 1216
                                        },
                                        "children": []
                                    }
                                ]
                            },
                            {
                                "id": "Rewritable_27",
                                "type": "Rewritable",
                                "data": {
                                    "id": "Rewritable_27",
                                    "inside": "Комбинированное применение условий и циклов. Студенты будут решать комплексные задачи, требующие комбинированного использования условных операторов и циклов.",
                                    "label": "Rewritable",
                                    "text": "УВ №11, Практическое занятие 9, \"Управляющие конструкции\""
                                },
                                "position": {
                                    "x": 2800,
                                    "y": 848
                                },
                                "children": [
                                    {
                                        "id": "Условные операторы-0_30",
                                        "type": "Rewritable",
                                        "data": {
                                            "label": "Условные операторы",
                                            "text": "Условные операторы",
                                            "inside": "Условные операторы в Python используются для принятия решений на основе выполнения условий. Они позволяют выполнять определенные действия, если условие истинно, и другие действия, если условие ложно.",
                                            "practice": [
                                                "Писать условные выражения для проверки различных условий в коде.",
                                                "Использовать условные операторы для выполнения различных действий в зависимости от результата проверки условий."
                                            ],
                                            "theory": [
                                                "Как формулировать условия с помощью операторов сравнения (например, ==, <, >) и логических операторов (например, and, or, not)."
                                            ]
                                        },
                                        "position": {
                                            "x": 2704,
                                            "y": 1232
                                        },
                                        "children": [
                                            {
                                                "id": "if-1_31",
                                                "type": "Rewritable",
                                                "data": {
                                                    "label": "if",
                                                    "text": "if",
                                                    "inside": "Условный оператор if в Python используется для выполнения определенного блока кода, если указанное условие истинно."
                                                },
                                                "position": {
                                                    "x": 2448,
                                                    "y": 1488
                                                },
                                                "children": []
                                            },
                                            {
                                                "id": "else-2_32",
                                                "type": "Rewritable",
                                                "data": {
                                                    "label": "else",
                                                    "text": "else",
                                                    "inside": "Условный оператор else в Python используется для выполнения блока кода, если условие, указанное в предшествующем операторе if, ложно."
                                                },
                                                "position": {
                                                    "x": 2704,
                                                    "y": 1488
                                                },
                                                "children": []
                                            },
                                            {
                                                "id": "elif-3_33",
                                                "type": "Rewritable",
                                                "data": {
                                                    "label": "elif",
                                                    "text": "elif",
                                                    "inside": "Условный оператор elif в Python используется для проверки дополнительных условий в случае, если условие предшествующего оператора if оказывается ложным."
                                                },
                                                "position": {
                                                    "x": 2960,
                                                    "y": 1488
                                                },
                                                "children": []
                                            }
                                        ]
                                    },
                                    {
                                        "id": "Циклы-0_37",
                                        "type": "Rewritable",
                                        "data": {
                                            "label": "Циклы",
                                            "text": "Циклы",
                                            "inside": "Циклы в Python используются для повторения выполнения определенного блока кода несколько раз или до выполнения определенного условия. В Python доступны два основных типа циклов: цикл for и цикл while.",
                                            "theory": [
                                                "Структуру и синтаксис цикла for, который используется для итерации по элементам итерируемого объекта.",
                                                "Структуру и синтаксис цикла while, который выполняет блок кода до тех пор, пока условие истинно.",
                                                "Как использовать операторы break и continue для управления выполнением циклов."
                                            ],
                                            "practice": [
                                                "Писать циклы for для выполнения действий над элементами итерируемых объектов.",
                                                "Писать циклы while для выполнения блока кода до выполнения определенного условия.",
                                                "Использовать операторы break и continue для управления выполнением циклов в зависимости от определенных условий"
                                            ]
                                        },
                                        "position": {
                                            "x": 2896,
                                            "y": 1232
                                        },
                                        "children": [
                                            {
                                                "id": "for-1_38",
                                                "type": "Rewritable",
                                                "data": {
                                                    "label": "for",
                                                    "text": "for",
                                                    "inside": "Цикл for в Python используется для итерации по элементам итерируемого объекта, такого как список, кортеж, строка или другой итерируемый объект. Он выполняет блок кода для каждого элемента в последовательности."
                                                },
                                                "position": {
                                                    "x": 2592,
                                                    "y": 1504
                                                },
                                                "children": []
                                            },
                                            {
                                                "id": "while-2_39",
                                                "type": "Rewritable",
                                                "data": {
                                                    "label": "while",
                                                    "text": "while",
                                                    "inside": "Цикл while в Python выполняет блок кода, пока условие остается истинным. Он используется, когда необходимо повторять выполнение кода до тех пор, пока условие остается истинным."
                                                },
                                                "position": {
                                                    "x": 2848,
                                                    "y": 1504
                                                },
                                                "children": []
                                            },
                                            {
                                                "id": "Вложенные циклы-3_40",
                                                "type": "Rewritable",
                                                "data": {
                                                    "label": "Вложенные циклы",
                                                    "text": "Вложенные циклы",
                                                    "inside": "В Python можно использовать один цикл внутри другого, создавая так называемые вложенные циклы. Это позволяет повторять выполнение блока кода внутри внешнего цикла для каждой итерации внешнего цикла.",
                                                    "theory": [
                                                        "Понимать, что количество итераций внутреннего цикла будет зависеть от количества итераций внешнего цикла."
                                                    ],
                                                    "practice": [
                                                        "Писать вложенные циклы для обработки двумерных структур данных и выполнения различных операций для каждого элемента в этих структурах."
                                                    ]
                                                },
                                                "position": {
                                                    "x": 3104,
                                                    "y": 1504
                                                },
                                                "children": []
                                            },
                                            {
                                                "id": "break и continue-4_41",
                                                "type": "Rewritable",
                                                "data": {
                                                    "label": "break и continue",
                                                    "text": "break и continue",
                                                    "inside": "Инструкции break и continue являются инструментами управления выполнением циклов в Python. Они позволяют изменять стандартное поведение циклов, прерывая выполнение цикла или переходя к следующей итерации в зависимости от определенных условий",
                                                    "theory": [
                                                        "break: Инструкция break используется для прерывания выполнения цикла и выхода из него, когда определенное условие выполняется.",
                                                        "continue: Инструкция continue используется для пропуска оставшейся части кода в текущей итерации цикла и перехода к следующей итерации."
                                                    ]
                                                },
                                                "position": {
                                                    "x": 3360,
                                                    "y": 1504
                                                },
                                                "children": []
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "id": "Rewritable_28",
                                "type": "Rewritable",
                                "data": {
                                    "id": "Rewritable_28",
                                    "inside": "Лекция будет посвящена функциям в Python. Рассмотрены темы создания и вызова функций, аргументы и параметры, область видимости переменных, а также рекурсия. Будет уделено внимание важности модульного программирования и повторного использования кода.",
                                    "label": "Rewritable",
                                    "text": "УВ №12, Лекционное занятие 3, \"Организация функций\""
                                },
                                "position": {
                                    "x": 2992,
                                    "y": 848
                                },
                                "children": [
                                    {
                                        "id": "Функции-0_46",
                                        "type": "Rewritable",
                                        "data": {
                                            "label": "Функции",
                                            "text": "Функции",
                                            "inside": "Функции в Python - это блоки кода, которые могут быть вызваны для выполнения определенной задачи. Они позволяют организовать код в более мелкие и повторно используемые блоки, что улучшает его читаемость, поддерживаемость и модульность.",
                                            "theory": [
                                                "Определение функций: Синтаксис определения функции включает ключевое слово def, за которым следует имя функции и круглые скобки с параметрами, если они есть.",
                                                "Аргументы и параметры: Функции могут принимать аргументы, которые передаются при вызове функции, и параметры, которые описываются в ее определении.",
                                                "Возвращаемое значение: Функции могут возвращать результат с помощью ключевого слова return.",
                                                "Локальные и глобальные переменные: Функции могут иметь доступ к переменным внутри своего тела, а также использовать переменные извне, если они объявлены как глобальные."
                                            ],
                                            "practice": [
                                                "Определять функции: Писать собственные функции с помощью ключевого слова def, задавая имя функции, параметры (по необходимости) и блок кода, который выполняется при вызове функции.",
                                                "Вызывать функции: Вызывать функции по их имени и передавать им аргументы, если они ожидаются.",
                                                "Использовать возвращаемые значения: Принимать и использовать возвращаемые значения функций для дальнейшей обработки.",
                                                "Работать с локальными и глобальными переменными: Понимать разницу между локальными и глобальными переменными и уметь правильно использовать их в функциях."
                                            ]
                                        },
                                        "position": {
                                            "x": 2992,
                                            "y": 1232
                                        },
                                        "children": [
                                            {
                                                "id": "Определение функции-1_47",
                                                "type": "Rewritable",
                                                "data": {
                                                    "label": "Определение функции",
                                                    "text": "Определение функции",
                                                    "inside": "В Python функции определяются с помощью ключевого слова def и выполняются блоком кода, который может быть вызван в любом месте программы."
                                                },
                                                "position": {
                                                    "x": 2608,
                                                    "y": 1488
                                                },
                                                "children": []
                                            },
                                            {
                                                "id": "Аргументы функции-2_48",
                                                "type": "Rewritable",
                                                "data": {
                                                    "label": "Аргументы функции",
                                                    "text": "Аргументы функции",
                                                    "inside": "Аргументы функций в Python - это значения, передаваемые в функцию при ее вызове. Они используются внутри функции для выполнения операций или расчетов."
                                                },
                                                "position": {
                                                    "x": 2864,
                                                    "y": 1488
                                                },
                                                "children": []
                                            },
                                            {
                                                "id": "Возвращаемые значения-3_49",
                                                "type": "Rewritable",
                                                "data": {
                                                    "label": "Возвращаемые значения",
                                                    "text": "Возвращаемые значения",
                                                    "inside": "В Python функции могут возвращать значения с помощью ключевого слова return. Возвращаемое значение - это результат выполнения функции, который может быть использован в других частях программы."
                                                },
                                                "position": {
                                                    "x": 3120,
                                                    "y": 1488
                                                },
                                                "children": []
                                            },
                                            {
                                                "id": "Рекурсия-4_50",
                                                "type": "Rewritable",
                                                "data": {
                                                    "label": "Рекурсия",
                                                    "text": "Рекурсия",
                                                    "inside": "Рекурсия в программировании означает вызов функции из нее самой. Это позволяет решать задачи, которые могут быть разбиты на более простые подзадачи, а также уменьшает объем кода.",
                                                    "theory": [
                                                        "Понимать стек вызовов: Понимать, что каждый рекурсивный вызов помещает свои локальные переменные в стек вызовов, и что стек может переполниться при слишком глубокой рекурсии."
                                                    ]
                                                },
                                                "position": {
                                                    "x": 3376,
                                                    "y": 1488
                                                },
                                                "children": []
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "id": "Rewritable_29",
                                "type": "Rewritable",
                                "data": {
                                    "id": "Rewritable_29",
                                    "inside": "Создание и вызов функций. Студенты научатся создавать простые функции и вызывать их, передавая аргументы и получая результаты.",
                                    "label": "Rewritable",
                                    "text": "УВ №13, Практическое занятие 10, \"Организация функций\""
                                },
                                "position": {
                                    "x": 3184,
                                    "y": 848
                                },
                                "children": [
                                    {
                                        "id": "Определение функции-0_55",
                                        "type": "Rewritable",
                                        "data": {
                                            "label": "Определение функции",
                                            "text": "Определение функции",
                                            "inside": "В Python функции определяются с помощью ключевого слова def и выполняются блоком кода, который может быть вызван в любом месте программы."
                                        },
                                        "position": {
                                            "x": 3056,
                                            "y": 1216
                                        },
                                        "children": []
                                    },
                                    {
                                        "id": "Возвращаемые значения-0_62",
                                        "type": "Rewritable",
                                        "data": {
                                            "label": "Возвращаемые значения",
                                            "text": "Возвращаемые значения",
                                            "inside": "В Python функции могут возвращать значения с помощью ключевого слова return. Возвращаемое значение - это результат выполнения функции, который может быть использован в других частях программы."
                                        },
                                        "position": {
                                            "x": 3248,
                                            "y": 1216
                                        },
                                        "children": []
                                    }
                                ]
                            },
                            {
                                "id": "Rewritable_30",
                                "type": "Rewritable",
                                "data": {
                                    "id": "Rewritable_30",
                                    "inside": "Область видимости переменных. В этой практике студенты будут работать с глобальными и локальными переменными, изучая, как Python управляет их областью видимости.",
                                    "label": "Rewritable",
                                    "text": "УВ №14, Практическое занятие 11, \"Организация функций\""
                                },
                                "position": {
                                    "x": 3376,
                                    "y": 848
                                },
                                "children": [
                                    {
                                        "id": "Определение функции-0_56",
                                        "type": "Rewritable",
                                        "data": {
                                            "label": "Определение функции",
                                            "text": "Определение функции",
                                            "inside": "В Python функции определяются с помощью ключевого слова def и выполняются блоком кода, который может быть вызван в любом месте программы."
                                        },
                                        "position": {
                                            "x": 3440,
                                            "y": 1216
                                        },
                                        "children": []
                                    }
                                ]
                            },
                            {
                                "id": "Rewritable_31",
                                "type": "Rewritable",
                                "data": {
                                    "id": "Rewritable_31",
                                    "inside": "Аргументы функций. Студенты узнают о различных типах аргументов (позиционные, именованные, аргументы по умолчанию) и их применении в функциях.",
                                    "label": "Rewritable",
                                    "text": "УВ №15, Практическое занятие 12, \"Организация функций\""
                                },
                                "position": {
                                    "x": 3568,
                                    "y": 848
                                },
                                "children": [
                                    {
                                        "id": "Аргументы функции-0_58",
                                        "type": "Rewritable",
                                        "data": {
                                            "label": "Аргументы функции",
                                            "text": "Аргументы функции",
                                            "inside": "Аргументы функций в Python - это значения, передаваемые в функцию при ее вызове. Они используются внутри функции для выполнения операций или расчетов."
                                        },
                                        "position": {
                                            "x": 3664,
                                            "y": 1184
                                        },
                                        "children": []
                                    },
                                    {
                                        "id": "Определение функции-0_59",
                                        "type": "Rewritable",
                                        "data": {
                                            "label": "Определение функции",
                                            "text": "Определение функции",
                                            "inside": "В Python функции определяются с помощью ключевого слова def и выполняются блоком кода, который может быть вызван в любом месте программы."
                                        },
                                        "position": {
                                            "x": 3472,
                                            "y": 1184
                                        },
                                        "children": []
                                    }
                                ]
                            },
                            {
                                "id": "Rewritable_32",
                                "type": "Rewritable",
                                "data": {
                                    "id": "Rewritable_32",
                                    "inside": "Рекурсия. В заключительной практике по функциям студенты будут решать задачи, требующие рекурсивного подхода, что поможет понять, как рекурсия работает и когда её следует использовать.",
                                    "label": "Rewritable",
                                    "text": "УВ №16, Практическое занятие 13, \"Организация функций\""
                                },
                                "position": {
                                    "x": 3760,
                                    "y": 848
                                },
                                "children": [
                                    {
                                        "id": "Определение функции-0_60",
                                        "type": "Rewritable",
                                        "data": {
                                            "label": "Определение функции",
                                            "text": "Определение функции",
                                            "inside": "В Python функции определяются с помощью ключевого слова def и выполняются блоком кода, который может быть вызван в любом месте программы."
                                        },
                                        "position": {
                                            "x": 3664,
                                            "y": 1200
                                        },
                                        "children": []
                                    },
                                    {
                                        "id": "Рекурсия-0_61",
                                        "type": "Rewritable",
                                        "data": {
                                            "label": "Рекурсия",
                                            "text": "Рекурсия",
                                            "inside": "Рекурсия в программировании означает вызов функции из нее самой. Это позволяет решать задачи, которые могут быть разбиты на более простые подзадачи, а также уменьшает объем кода.",
                                            "theory": [
                                                "Понимать стек вызовов: Понимать, что каждый рекурсивный вызов помещает свои локальные переменные в стек вызовов, и что стек может переполниться при слишком глубокой рекурсии."
                                            ]
                                        },
                                        "position": {
                                            "x": 3856,
                                            "y": 1200
                                        },
                                        "children": []
                                    }
                                ]
                            },
                            {
                                "id": "Rewritable_33",
                                "type": "Rewritable",
                                "data": {
                                    "id": "Rewritable_33",
                                    "inside": "Лекция будет посвящена методам и инструментам для работы со строками в Python. Студенты узнают о строковых методах, форматировании строк, регулярных выражениях и других средствах обработки текста.",
                                    "label": "Rewritable",
                                    "text": "УВ №17, Лекционное занятие 4, \"Работа со строками и текстом\""
                                },
                                "position": {
                                    "x": 3952,
                                    "y": 848
                                },
                                "children": [
                                    {
                                        "id": "Работа со строками-0_63",
                                        "type": "Rewritable",
                                        "data": {
                                            "label": "Работа со строками",
                                            "text": "Работа со строками",
                                            "inside": "Работа со строками в Python включает в себя множество операций, таких как объединение, извлечение подстрок, поиск и замена символов, форматирование строк и другие.",
                                            "theory": [
                                                "Объединение строк: Использование оператора + для объединения двух строк в одну.",
                                                "Извлечение подстрок: Использование квадратных скобок [ ] для извлечения определенных символов или диапазона символов из строки.",
                                                "Методы строк: В Python есть множество встроенных методов для работы со строками, таких как split(), join(), find(), replace() и другие.",
                                                "Форматирование строк: Методы форматирования строк, такие как использование оператора %, метод format() или f-строки"
                                            ],
                                            "practice": [
                                                "Выполнять операции с строками: Умение объединять, разделять, заменять и форматировать строки в соответствии с требованиями задачи.",
                                                "Понимать различные методы строк: Знание встроенных методов для работы со строками и умение их использовать для выполнения различных операций.",
                                                "Обрабатывать Unicode: Понимание особенностей работы со строками Unicode, таких как кодировки и декодирование."
                                            ]
                                        },
                                        "position": {
                                            "x": 3952,
                                            "y": 1168
                                        },
                                        "children": [
                                            {
                                                "id": "Методы строк-1_64",
                                                "type": "Rewritable",
                                                "data": {
                                                    "label": "Методы строк",
                                                    "text": "Методы строк", 
                                                    "inside": "Методы строк в Python предоставляют возможность выполнения различных операций над строками, таких как поиск подстрок, замена символов, разделение и объединение строк и многое другое. Вот несколько основных методов:\nstr.capitalize() - возвращает копию строки с первым символом в верхнем регистре.\nПример:\ns = 'hello'\nprint(s.capitalize())  # Вывод: Hello\nstr.upper() - возвращает копию строки с символами в верхнем регистре.\nПример:\ns = 'hello'\nprint(s.upper())  # Вывод: HELLO\nstr.lower() - возвращает копию строки с символами в нижнем регистре.\nПримерs = 'HELLO'\nprint(s.lower())  # Вывод: hello"
                                                },
                                                "position": {
                                                    "x": 3696,
                                                    "y": 1424
                                                },
                                                "children": []
                                            },
                                            {
                                                "id": "Форматирование строк-2_65",
                                                "type": "Rewritable",
                                                "data": {
                                                    "label": "Форматирование строк",
                                                    "text": "Форматирование строк",
                                                    "inside": "Форматирование строк в Python — это способ создания строк, в которых значения переменных вставляются в определенные места с помощью заполнителей. В Python существует несколько способов форматирования строк, включая метод format() и f-строки."
                                                },
                                                "position": {
                                                    "x": 3952,
                                                    "y": 1424
                                                },
                                                "children": []
                                            },
                                            {
                                                "id": "Регулярные выражения-3_66",
                                                "type": "Rewritable",
                                                "data": {
                                                    "label": "Регулярные выражения",
                                                    "text": "Регулярные выражения",
                                                    "inside": "Регулярные выражения (регэкспы) — это мощный инструмент для работы с текстом, который позволяет искать, извлекать и модифицировать подстроки в строках на основе определенных шаблонов. В Python для работы с регулярными выражениями используется модуль re.",
                                                    "theory": [
                                                        "Синтаксис регулярных выражений.",
                                                        "Основные метасимволы и их значение.",
                                                        "Как использовать функции модуля re, такие как search(), findall(), sub()."
                                                    ],
                                                    "practice": [
                                                        "Составлять регулярные выражения для поиска и извлечения подстрок в тексте.",
                                                        "Применять функции модуля re для работы с регулярными выражениями."
                                                    ]
                                                },
                                                "position": {
                                                    "x": 4208,
                                                    "y": 1424
                                                },
                                                "children": []
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "id": "Rewritable_34",
                                "type": "Rewritable",
                                "data": {
                                    "id": "Rewritable_34",
                                    "inside": "Методы строк. В этой практике студенты будут изучать и применять различные методы строк, такие как upper(), lower(), replace(), split(), и т.д.",
                                    "label": "Rewritable",
                                    "text": "УВ №18, Практическое занятие 14, \"Работа со строками и текстом\""
                                },
                                "position": {
                                    "x": 4144,
                                    "y": 848
                                },
                                "children": [
                                    {
                                        "id": "Методы строк-0_70",
                                        "type": "Rewritable",
                                        "data": {
                                            "label": "Методы строк",
                                            "text": "Методы строк",
                                            "inside": "Методы строк в Python предоставляют возможность выполнения различных операций над строками, таких как поиск подстрок, замена символов, разделение и объединение строк и многое другое. Вот несколько основных методов:\nstr.capitalize() - возвращает копию строки с первым символом в верхнем регистре.\nПример:\ns = 'hello'\nprint(s.capitalize())  # Вывод: Hello\nstr.upper() - возвращает копию строки с символами в верхнем регистре.\nПример:\ns = 'hello'\nprint(s.upper())  # Вывод: HELLO\nstr.lower() - возвращает копию строки с символами в нижнем регистре.\nПримерs = 'HELLO'\nprint(s.lower())  # Вывод: hello"
                                        },
                                        "position": {
                                            "x": 4144,
                                            "y": 1168
                                        },
                                        "children": []
                                    }
                                ]
                            },
                            {
                                "id": "Rewritable_35",
                                "type": "Rewritable",
                                "data": {
                                    "id": "Rewritable_35",
                                    "inside": "Форматирование строк. Студенты научатся форматировать строки с использованием операторов %, метода format(), и f-строк.",
                                    "label": "Rewritable",
                                    "text": "УВ №19, Практическое занятие 15, \"Работа со строками и текстом\""
                                },
                                "position": {
                                    "x": 4336,
                                    "y": 848
                                },
                                "children": [
                                    {
                                        "id": "Форматирование строк-0_71",
                                        "type": "Rewritable",
                                        "data": {
                                            "label": "Форматирование строк",
                                            "text": "Форматирование строк",
                                            "inside": "Форматирование строк в Python — это способ создания строк, в которых значения переменных вставляются в определенные места с помощью заполнителей. В Python существует несколько способов форматирования строк, включая метод format() и f-строки."
                                        },
                                        "position": {
                                            "x": 4336,
                                            "y": 1168
                                        },
                                        "children": []
                                    }
                                ]
                            },
                            {
                                "id": "Rewritable_36",
                                "type": "Rewritable",
                                "data": {
                                    "id": "Rewritable_36",
                                    "inside": "Регулярные выражения. Заключительная практика будет посвящена основам работы с регулярными выражениями для поиска и замены текста в строках.",
                                    "label": "Rewritable",
                                    "text": "УВ №20, Практическое занятие 16, \"Работа со строками и текстом\""
                                },
                                "position": {
                                    "x": 4528,
                                    "y": 848
                                },
                                "children": [
                                    {
                                        "id": "Регулярные выражения-0_72",
                                        "type": "Rewritable",
                                        "data": {
                                            "label": "Регулярные выражения",
                                            "text": "Регулярные выражения",
                                            "inside": "Регулярные выражения (регэкспы) — это мощный инструмент для работы с текстом, который позволяет искать, извлекать и модифицировать подстроки в строках на основе определенных шаблонов. В Python для работы с регулярными выражениями используется модуль re.",
                                            "theory": [
                                                "Синтаксис регулярных выражений.",
                                                "Основные метасимволы и их значение.",
                                                "Как использовать функции модуля re, такие как search(), findall(), sub()."
                                            ],
                                            "practice": [
                                                "Составлять регулярные выражения для поиска и извлечения подстрок в тексте.",
                                                "Применять функции модуля re для работы с регулярными выражениями."
                                            ]
                                        },
                                        "position": {
                                            "x": 4528,
                                            "y": 1168
                                        },
                                        "children": []
                                    }
                                ]
                            },
                            {
                                "id": "Rewritable_37",
                                "type": "Rewritable",
                                "data": {
                                    "id": "Rewritable_37",
                                    "inside": "Лекция охватит основные коллекции данных в Python (списки, кортежи, множества, словари) и методы работы с ними. Также будут рассмотрены основы работы с файлами: чтение и запись данных в файлы.",
                                    "label": "Rewritable",
                                    "text": "УВ №21, Лекционное занятие 5, \"Коллекции. Работа с файлами\""
                                },
                                "position": {
                                    "x": 4720,
                                    "y": 848
                                },
                                "children": [
                                    {
                                        "id": "Работа с файлами-0_73",
                                        "type": "Rewritable",
                                        "data": {
                                            "label": "Работа с файлами",
                                            "text": "Работа с файлами",
                                            "inside": "Работа с файлами в Python позволяет выполнять операции чтения, записи и модификации данных в файлах на диске. Для этого используются функции и методы стандартной библиотеки Python.",
                                            "theory":
                                            [   
                                                "Открытие файла с помощью функции open() и её параметры.",
                                                "Режимы открытия файлов ('r', 'w', 'a', 'r+', 'b', и т.д.).",
                                                "Операции чтения, записи и модификации данных в файлах.",
                                                "Закрытие файла с помощью метода close()."
                                            ],
                                            "practice":
                                            [
                                                "Открывать файлы для чтения, записи и модификации.",
                                                "Читать данные из файла и записывать данные в файл.",
                                                "Обрабатывать исключения, возникающие при работе с файлами.",
                                                "Закрывать файл после завершения работы с ним."
                                            ]
                                        },
                                        "position": {
                                            "x": 4656,
                                            "y": 1168
                                        },
                                        "children": [
                                            {
                                                "id": "Чтение файла-1_74",
                                                "type": "Rewritable",
                                                "data": {
                                                    "label": "Чтение файла",
                                                    "text": "Чтение файла",
                                                    "inside": "Чтение файла в Python позволяет получить доступ к содержимому файла для его обработки в программе. Это может быть полезно для чтения текстовых файлов, файлов данных или любых других типов файлов."
                                                },
                                                "position": {
                                                    "x": 4624,
                                                    "y": 1456
                                                },
                                                "children": []
                                            },
                                            {
                                                "id": "Запись в файл-2_75",
                                                "type": "Rewritable",
                                                "data": {
                                                    "label": "Запись в файл",
                                                    "text": "Запись в файл",
                                                    "inside": "Запись в файл в Python позволяет сохранить данные из программы в файле на диске. Это может быть полезно для сохранения результатов работы программы, создания отчетов или любых других типов файлов."
                                                },
                                                "position": {
                                                    "x": 4816,
                                                    "y": 1456
                                                },
                                                "children": []
                                            }
                                        ]
                                    },
                                    {
                                        "id": "Коллекции-0_78",
                                        "type": "Rewritable",
                                        "data": {
                                            "label": "Коллекции",
                                            "text": "Коллекции",
                                            "inside": "В Python коллекции представляют собой структуры данных, которые позволяют хранить множество элементов в одной переменной. Основные типы коллекций в Python включают в себя списки, кортежи, множества и словари. Каждый из этих типов имеет свои уникальные свойства и методы работы.",
                                            "theory":[
                                                "Различия между разными типами коллекций.",
                                                "Операции и методы, доступные для работы с каждым типом коллекции.",
                                                "Принципы индексации и доступа к элементам коллекций."
                                            ],
                                            "practice":[
                                                "Создавать и инициализировать различные типы коллекций.",
                                                "Выполнять основные операции над коллекциями, такие как добавление элементов, удаление элементов, доступ к элементам по индексу.",
                                                "Применять методы работы с коллекциями, такие как сортировка, объединение и фильтрация"
                                            ]
                                        },
                                        "position": {
                                            "x": 4848,
                                            "y": 1168
                                        },
                                        "children": [
                                            {
                                                "id": "Списки-1_79",
                                                "type": "Rewritable",
                                                "data": {
                                                    "label": "Списки",
                                                    "text": "Списки",
                                                    "inside": "Список в Python представляет собой упорядоченную коллекцию элементов, которая позволяет хранить различные типы данных в одной переменной. Списки могут содержать элементы одного или разных типов, и их размер может изменяться динамически."
                                                },
                                                "position": {
                                                    "x": 4480,
                                                    "y": 1440
                                                },
                                                "children": []
                                            },
                                            {
                                                "id": "Кортежи-2_80",
                                                "type": "Rewritable",
                                                "data": {
                                                    "label": "Кортежи",
                                                    "text": "Кортежи",
                                                    "inside": "Кортеж в Python - это упорядоченная коллекция элементов, которая, в отличие от списка, неизменяема. Это означает, что после создания кортежа вы не можете изменить его элементы. Кортежи используются для хранения коллекции данных, которые не должны изменяться."
                                                },
                                                "position": {
                                                    "x": 4736,
                                                    "y": 1440
                                                },
                                                "children": []
                                            },
                                            {
                                                "id": "Множества-3_81",
                                                "type": "Rewritable",
                                                "data": {
                                                    "label": "Множества",
                                                    "text": "Множества",
                                                    "inside": "Множество в Python - это неупорядоченная коллекция уникальных элементов. Основное свойство множества заключается в том, что оно не содержит повторяющихся элементов. Множества поддерживают основные операции теории множеств, такие как объединение, пересечение, разность и дополнение."
                                                },
                                                "position": {
                                                    "x": 4992,
                                                    "y": 1440
                                                },
                                                "children": []
                                            },
                                            {
                                                "id": "Словари-4_82",
                                                "type": "Rewritable",
                                                "data": {
                                                    "label": "Словари",
                                                    "text": "Словари",
                                                    "inside": "Словарь в Python - это неупорядоченная коллекция данных, которая использует пары ключ-значение для хранения элементов. Каждый элемент в словаре представляет собой пару ключа и соответствующего ему значения. Словари в Python позволяют быстро находить значение по ключу."
                                                },
                                                "position": {
                                                    "x": 5248,
                                                    "y": 1440
                                                },
                                                "children": []
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "id": "Rewritable_38",
                                "type": "Rewritable",
                                "data": {
                                    "id": "Rewritable_38",
                                    "inside": "Работа с коллекциями. Студенты будут решать задачи, требующие использования различных типов коллекций, изучат основные методы и операции над ними (добавление, удаление, поиск элементов и т.д.).",
                                    "label": "Rewritable",
                                    "text": "УВ №22, Практическое занятие 17, \"Коллекции. Работа с файлами\""
                                },
                                "position": {
                                    "x": 4912,
                                    "y": 848
                                },
                                "children": [
                                    {
                                        "id": "Коллекции-0_88",
                                        "type": "Rewritable",
                                        "data": {
                                            "label": "Коллекции",
                                            "text": "Коллекции",
                                            "inside": "В Python коллекции представляют собой структуры данных, которые позволяют хранить множество элементов в одной переменной. Основные типы коллекций в Python включают в себя списки, кортежи, множества и словари. Каждый из этих типов имеет свои уникальные свойства и методы работы.",
                                            "theory":[
                                                "Различия между разными типами коллекций.",
                                                "Операции и методы, доступные для работы с каждым типом коллекции.",
                                                "Принципы индексации и доступа к элементам коллекций."
                                            ],
                                            "practice":[
                                                "Создавать и инициализировать различные типы коллекций.",
                                                "Выполнять основные операции над коллекциями, такие как добавление элементов, удаление элементов, доступ к элементам по индексу.",
                                                "Применять методы работы с коллекциями, такие как сортировка, объединение и фильтрация"
                                            ]
                                        },
                                        "position": {
                                            "x": 4912,
                                            "y": 1200
                                        },
                                        "children": [
                                            {
                                                "id": "Списки-1_89",
                                                "type": "Rewritable",
                                                "data": {
                                                    "label": "Списки",
                                                    "text": "Списки",
                                                    "inside": "Список в Python представляет собой упорядоченную коллекцию элементов, которая позволяет хранить различные типы данных в одной переменной. Списки могут содержать элементы одного или разных типов, и их размер может изменяться динамически."
                                                },
                                                "position": {
                                                    "x": 4528,
                                                    "y": 1456
                                                },
                                                "children": []
                                            },
                                            {
                                                "id": "Кортежи-2_90",
                                                "type": "Rewritable",
                                                "data": {
                                                    "label": "Кортежи",
                                                    "text": "Кортежи",
                                                    "inside": "Кортеж в Python - это упорядоченная коллекция элементов, которая, в отличие от списка, неизменяема. Это означает, что после создания кортежа вы не можете изменить его элементы. Кортежи используются для хранения коллекции данных, которые не должны изменяться."
                                                },
                                                "position": {
                                                    "x": 4784,
                                                    "y": 1456
                                                },
                                                "children": []
                                            },
                                            {
                                                "id": "Множества-3_91",
                                                "type": "Rewritable",
                                                "data": {
                                                    "label": "Множества",
                                                    "text": "Множества",
                                                    "inside": "Множество в Python - это неупорядоченная коллекция уникальных элементов. Основное свойство множества заключается в том, что оно не содержит повторяющихся элементов. Множества поддерживают основные операции теории множеств, такие как объединение, пересечение, разность и дополнение."
                                                },
                                                "position": {
                                                    "x": 5040,
                                                    "y": 1456
                                                },
                                                "children": []
                                            },
                                            {
                                                "id": "Словари-4_92",
                                                "type": "Rewritable",
                                                "data": {
                                                    "label": "Словари",
                                                    "text": "Словари",
                                                    "inside": "Словарь в Python - это неупорядоченная коллекция данных, которая использует пары ключ-значение для хранения элементов. Каждый элемент в словаре представляет собой пару ключа и соответствующего ему значения. Словари в Python позволяют быстро находить значение по ключу."
                                                },
                                                "position": {
                                                    "x": 5296,
                                                    "y": 1456
                                                },
                                                "children": []
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "id": "Rewritable_39",
                                "type": "Rewritable",
                                "data": {
                                    "id": "Rewritable_39",
                                    "inside": "Словари и множества. В этой практике студенты глубже изучат работу со словарями и множествами, их уникальные свойства и применение.",
                                    "label": "Rewritable",
                                    "text": "УВ №23, Практическое занятие 18, \"Коллекции. Работа с файлами\""
                                },
                                "position": {
                                    "x": 5104,
                                    "y": 848
                                },
                                "children": [
                                    {
                                        "id": "Словари-0_97",
                                        "type": "Rewritable",
                                        "data": {
                                            "label": "Словари",
                                            "text": "Словари",
                                            "inside": "Словарь в Python - это неупорядоченная коллекция данных, которая использует пары ключ-значение для хранения элементов. Каждый элемент в словаре представляет собой пару ключа и соответствующего ему значения. Словари в Python позволяют быстро находить значение по ключу."
                                        },
                                        "position": {
                                            "x": 5008,
                                            "y": 1216
                                        },
                                        "children": []
                                    },
                                    {
                                        "id": "Множества-0_98",
                                        "type": "Rewritable",
                                        "data": {
                                            "label": "Множества",
                                            "text": "Множества"
                                        },
                                        "position": {
                                            "x": 5200,
                                            "y": 1216
                                        },
                                        "children": []
                                    }
                                ]
                            },
                            {
                                "id": "Rewritable_40",
                                "type": "Rewritable",
                                "data": {
                                    "id": "Rewritable_40",
                                    "inside": "Работа с файлами. Студенты научатся читать данные из файлов и записывать данные в файлы, решая задачи, связанные с обработкой текстовых файлов.",
                                    "label": "Rewritable",
                                    "text": "УВ №24, Практическое занятие 19, \"Коллекции. Работа с файлами\""
                                },
                                "position": {
                                    "x": 5296,
                                    "y": 848
                                },
                                "children": [
                                    {
                                        "id": "Работа с файлами-0_99",
                                        "type": "Rewritable",
                                        "data": {
                                            "label": "Работа с файлами",
                                            "text": "Работа с файлами",
                                            "inside": "Работа с файлами в Python позволяет выполнять операции чтения, записи и модификации данных в файлах на диске. Для этого используются функции и методы стандартной библиотеки Python.",
                                            "theory":
                                            [   
                                                "Открытие файла с помощью функции open() и её параметры.",
                                                "Режимы открытия файлов ('r', 'w', 'a', 'r+', 'b', и т.д.).",
                                                "Операции чтения, записи и модификации данных в файлах.",
                                                "Закрытие файла с помощью метода close()."
                                            ],
                                            "practice":
                                            [
                                                "Открывать файлы для чтения, записи и модификации.",
                                                "Читать данные из файла и записывать данные в файл.",
                                                "Обрабатывать исключения, возникающие при работе с файлами.",
                                                "Закрывать файл после завершения работы с ним."
                                            ]
                                        },
                                        "position": {
                                            "x": 5312,
                                            "y": 1200
                                        },
                                        "children": [
                                            {
                                                "id": "Чтение файла-1_100",
                                                "type": "Rewritable",
                                                "data": {
                                                    "label": "Чтение файла",
                                                    "text": "Чтение файла",
                                                    "inside": "Чтение файла в Python позволяет получить доступ к содержимому файла для его обработки в программе. Это может быть полезно для чтения текстовых файлов, файлов данных или любых других типов файлов."
                                                },
                                                "position": {
                                                    "x": 5184,
                                                    "y": 1456
                                                },
                                                "children": []
                                            },
                                            {
                                                "id": "Запись в файл-2_101",
                                                "type": "Rewritable",
                                                "data": {
                                                    "label": "Запись в файл",
                                                    "text": "Запись в файл",
                                                    "inside": "Запись в файл в Python позволяет сохранить данные из программы в файле на диске. Это может быть полезно для сохранения результатов работы программы, создания отчетов или любых других типов файлов."
                                                },
                                                "position": {
                                                    "x": 5440,
                                                    "y": 1456
                                                },
                                                "children": []
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "id": "Rewritable_41",
                                "type": "Rewritable",
                                "data": {
                                    "id": "Rewritable_41",
                                    "inside": "Лекция будет посвящена элементам функционального программирования в Python. Рассмотрены такие концепции, как лямбда-функции, функции высшего порядка, map, filter, reduce и list comprehensions.",
                                    "label": "Rewritable",
                                    "text": "УВ №25, Лекционное занятие 6, \"Элементы функционального программирования\""
                                },
                                "position": {
                                    "x": 5488,
                                    "y": 848
                                },
                                "children": [
                                    {
                                        "id": "Элементы функционального программирования-0_104",
                                        "type": "Rewritable",
                                        "data": {
                                            "label": "Элементы функционального программирования",
                                            "text": "Элементы функционального программирования",
                                            "inside": "Функциональное программирование - это парадигма программирования, в которой программа строится на основе функций. Основные элементы функционального программирования в Python включают в себя функции высшего порядка, анонимные функции (лямбда-функции), замыкания, чистые функции и рекурсию."
                                        },
                                        "position": {
                                            "x": 5488,
                                            "y": 1216
                                        },
                                        "children": [
                                            {
                                                "id": "Lambda-функции-1_105",
                                                "type": "Rewritable",
                                                "data": {
                                                    "label": "Lambda-функции",
                                                    "text": "Lambda-функции",
                                                    "inside": "Лямбда-функции - это способ создания анонимных функций в Python. Они представляют собой однострочные функции, которые могут содержать только одно выражение. Лямбда-функции удобны для определения простых функций на месте, без явного объявления имени функции."
                                                },
                                                "position": {
                                                    "x": 5232,
                                                    "y": 1472
                                                },
                                                "children": []
                                            },
                                            {
                                                "id": "Функции высшего порядка-2_106",
                                                "type": "Rewritable",
                                                "data": {
                                                    "label": "Функции высшего порядка",
                                                    "text": "Функции высшего порядка",
                                                    "inside": "Функции высшего порядка в Python - это функции, которые принимают другие функции в качестве аргументов или возвращают функции как результат. Этот концепт является основным в функциональном программировании и позволяет писать более абстрактные и гибкие программы."
                                                },
                                                "position": {
                                                    "x": 5488,
                                                    "y": 1472
                                                },
                                                "children": []
                                            },
                                            {
                                                "id": "List Comprehensions-3_107",
                                                "type": "Rewritable",
                                                "data": {
                                                    "label": "List Comprehensions",
                                                    "text": "List Comprehensions",
                                                    "inside": "Генераторы списков - это компактный способ создания списков в Python. Они позволяют создавать новые списки путем применения выражений к каждому элементу последовательности или итерируемого объекта. Генераторы списков представляют собой альтернативу использованию циклов for для создания списков.",
                                                    "theory":[
                                                        "Синтаксис генераторов списков в Python.",
                                                        "Как использовать условия в генераторах списков для фильтрации элементов.",
                                                        "Когда использовать генераторы списков для создания новых списков."
                                                    ],
                                                    "practice":[
                                                        "Создавать генераторы списков для выполнения простых преобразований над элементами.",
                                                        "Применять условия в генераторах списков для фильтрации элементов в зависимости от определенных условий.",
                                                        "Понимать ограничения и преимущества использования генераторов списков по сравнению с использованием циклов for."
                                                    ]
                                                },
                                                "position": {
                                                    "x": 5744,
                                                    "y": 1472
                                                },
                                                "children": []
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "id": "Rewritable_42",
                                "type": "Rewritable",
                                "data": {
                                    "id": "Rewritable_42",
                                    "inside": "Лямбда-функции и функции высшего порядка. Студенты научатся создавать и использовать лямбда-функции, а также использовать функции высшего порядка, такие как map(), filter().",
                                    "label": "Rewritable",
                                    "text": "УВ №26, Практическое занятие 20, \"Элементы функционального программирования\""
                                },
                                "position": {
                                    "x": 5680,
                                    "y": 848
                                },
                                "children": [
                                    {
                                        "id": "Lambda-функции-0_111",
                                        "type": "Rewritable",
                                        "data": {
                                            "label": "Lambda-функции",
                                            "text": "Lambda-функции",
                                            "inside": "Лямбда-функции - это способ создания анонимных функций в Python. Они представляют собой однострочные функции, которые могут содержать только одно выражение. Лямбда-функции удобны для определения простых функций на месте, без явного объявления имени функции."
                                        },
                                        "position": {
                                            "x": 5600,
                                            "y": 1232
                                        },
                                        "children": []
                                    },
                                    {
                                        "id": "Функции высшего порядка-0_112",
                                        "type": "Rewritable",
                                        "data": {
                                            "label": "Функции высшего порядка",
                                            "text": "Функции высшего порядка",
                                            "inside": "Функции высшего порядка в Python - это функции, которые принимают другие функции в качестве аргументов или возвращают функции как результат. Этот концепт является основным в функциональном программировании и позволяет писать более абстрактные и гибкие программы."
                                        },
                                        "position": {
                                            "x": 5792,
                                            "y": 1232
                                        },
                                        "children": []
                                    }
                                ]
                            },
                            {
                                "id": "Rewritable_43",
                                "type": "Rewritable",
                                "data": {
                                    "id": "Rewritable_43",
                                    "inside": "List comprehensions и reduce(). В заключительной практике студенты изучат и применят list comprehensions для создания списков, а также познакомятся с функцией reduce() для агрегирования данных.",
                                    "label": "Rewritable",
                                    "text": "УВ №27, Практическое занятие 21, \"Элементы функционального программирования\""
                                },
                                "position": {
                                    "x": 5872,
                                    "y": 848
                                },
                                "children": [
                                    {
                                        "id": "List Comprehensions-0_113",
                                        "type": "Rewritable",
                                        "data": {
                                            "label": "List Comprehensions",
                                            "text": "List Comprehensions",
                                            "inside": "Генераторы списков - это компактный способ создания списков в Python. Они позволяют создавать новые списки путем применения выражений к каждому элементу последовательности или итерируемого объекта. Генераторы списков представляют собой альтернативу использованию циклов for для создания списков.",
                                            "theory":[
                                                "Синтаксис генераторов списков в Python.",
                                                "Как использовать условия в генераторах списков для фильтрации элементов.",
                                                "Когда использовать генераторы списков для создания новых списков."
                                            ],
                                            "practice":[
                                                "Создавать генераторы списков для выполнения простых преобразований над элементами.",
                                                "Применять условия в генераторах списков для фильтрации элементов в зависимости от определенных условий.",
                                                "Понимать ограничения и преимущества использования генераторов списков по сравнению с использованием циклов for."
                                            ]
                                        },
                                        "position": {
                                            "x": 5872,
                                            "y": 1216
                                        },
                                        "children": []
                                    }
                                ]
                            },
                            {
                                "id": "Rewritable_44",
                                "type": "Rewritable",
                                "data": {
                                    "id": "Rewritable_44",
                                    "inside": "Основные принципы организации Языка Python. Базовые элементы.\nЧто такое переменная в Python и как её объявить? Приведите примеры.\nКакие основные типы данных существуют в Python? Опишите их.\nКак выполнить конвертацию типа данных в Python? Приведите примеры.\nКакие арифметические операторы поддерживаются в Python? Приведите примеры использования.\nУправляющие конструкции\nОпишите работу условных операторов if, elif, else в Python. Приведите примеры.\nКак работает цикл for в Python? Приведите пример его использования для перебора элементов списка.\nКак работает цикл while в Python? Приведите пример его использования.\nДля чего используются операторы break и continue в циклах? Приведите примеры.\nОбъясните принцип работы вложенных циклов и приведите пример.\nОрганизация функций\nКак создать функцию в Python? Приведите пример.\nОбъясните разницу между глобальными и локальными переменными. Приведите примеры.\nКакие типы аргументов поддерживаются в функциях Python? Приведите примеры.\nЧто такое рекурсия? Приведите пример рекурсивной функции.\nРабота со строками и текстом\nПеречислите основные методы строк в Python и их назначение.\nКак форматировать строки в Python с использованием f-строк? Приведите примеры.\nЧто такое регулярные выражения и как их использовать в Python? Приведите примеры.\nКоллекции. Работа с файлами\nПеречислите основные типы коллекций в Python и опишите их особенности.\nКак создать и использовать словари и множества в Python? Приведите примеры.\nОпишите процесс чтения данных из файла в Python. Приведите пример кода.\nОпишите процесс записи данных в файл в Python. Приведите пример кода.\nЭлементы функционального программирования\nЧто такое лямбда-функция в Python и как её использовать? Приведите пример.\nОбъясните, что такое функции высшего порядка и как их использовать в Python.\nЧто такое list comprehensions и как их применять? Приведите примеры.\nКак использовать функции map(), filter() и reduce() в Python? Приведите примеры.\n",
                                    "label": "Rewritable",
                                    "text": "УВ №28, Консультация 1, \"Консультация\""
                                },
                                "position": {
                                    "x": 6064,
                                    "y": 848
                                },
                                "children": []
                            },
                            {
                                "id": "Rewritable_45",
                                "type": "Rewritable",
                                "data": {
                                    "id": "Rewritable_45",
                                    "inside": "Консультация",
                                    "label": "Rewritable",
                                    "text": "УВ №29, Консультация 2, \"Консультация\""
                                },
                                "position": {
                                    "x": 6256,
                                    "y": 848
                                },
                                "children": []
                            },
                            {
                                "id": "Rewritable_46",
                                "type": "Rewritable",
                                "data": {
                                    "id": "Rewritable_46",
                                    "inside": "Консультация",
                                    "label": "Rewritable",
                                    "text": "УВ №30, Консультация 3, \"Консультация\""
                                },
                                "position": {
                                    "x": 6448,
                                    "y": 848
                                },
                                "children": []
                            },
                            {
                                "id": "Rewritable_47",
                                "type": "Rewritable",
                                "data": {
                                    "id": "Rewritable_47",
                                    "inside": "\n\nДифференцированный зачет\n\nЗачет с оценкой\n\n",
                                    "label": "Rewritable",
                                    "text": "УВ №31, Аттестация 1, \"Аттестация\""
                                },
                                "position": {
                                    "x": 6640,
                                    "y": 848
                                },
                                "children": [
                                    {
                                        "id": "Python-0_0",
                                        "type": "Rewritable",
                                        "data": {
                                            "label": "Python",
                                            "text": "Python"
                                        },
                                        "position": {
                                            "x": 6640,
                                            "y": 1424
                                        },
                                        "children": [
                                            {
                                                "id": "Основы Python-1_1",
                                                "type": "Rewritable",
                                                "data": {
                                                    "label": "Основы Python",
                                                    "text": "Основы Python"
                                                },
                                                "position": {
                                                    "x": 3184,
                                                    "y": 1680
                                                },
                                                "children": [
                                                    {
                                                        "id": "Переменные и типы данных-11_11",
                                                        "type": "Rewritable",
                                                        "data": {
                                                            "label": "Переменные и типы данных",
                                                            "text": "Переменные и типы данных"
                                                        },
                                                        "position": {
                                                            "x": 3056,
                                                            "y": 1936
                                                        },
                                                        "children": [
                                                            {
                                                                "id": "Операции с переменными-37_37",
                                                                "type": "Rewritable",
                                                                "data": {
                                                                    "label": "Операции с переменными",
                                                                    "text": "Операции с переменными"
                                                                },
                                                                "position": {
                                                                    "x": 2928,
                                                                    "y": 2192
                                                                },
                                                                "children": []
                                                            },
                                                            {
                                                                "id": "Конвертация типов-38_38",
                                                                "type": "Rewritable",
                                                                "data": {
                                                                    "label": "Конвертация типов",
                                                                    "text": "Конвертация типов"
                                                                },
                                                                "position": {
                                                                    "x": 3184,
                                                                    "y": 2192
                                                                },
                                                                "children": []
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "id": "Основные операторы-12_12",
                                                        "type": "Rewritable",
                                                        "data": {
                                                            "label": "Основные операторы",
                                                            "text": "Основные операторы"
                                                        },
                                                        "position": {
                                                            "x": 3312,
                                                            "y": 1936
                                                        },
                                                        "children": []
                                                    }
                                                ]
                                            },
                                            {
                                                "id": "Синтаксис-2_2",
                                                "type": "Rewritable",
                                                "data": {
                                                    "label": "Синтаксис",
                                                    "text": "Синтаксис"
                                                },
                                                "position": {
                                                    "x": 4144,
                                                    "y": 1680
                                                },
                                                "children": [
                                                    {
                                                        "id": "Условные операторы-13_13",
                                                        "type": "Rewritable",
                                                        "data": {
                                                            "label": "Условные операторы",
                                                            "text": "Условные операторы"
                                                        },
                                                        "position": {
                                                            "x": 3696,
                                                            "y": 1936
                                                        },
                                                        "children": [
                                                            {
                                                                "id": "if-39_39",
                                                                "type": "Rewritable",
                                                                "data": {
                                                                    "label": "if",
                                                                    "text": "if"
                                                                },
                                                                "position": {
                                                                    "x": 3440,
                                                                    "y": 2192
                                                                },
                                                                "children": []
                                                            },
                                                            {
                                                                "id": "else-40_40",
                                                                "type": "Rewritable",
                                                                "data": {
                                                                    "label": "else",
                                                                    "text": "else"
                                                                },
                                                                "position": {
                                                                    "x": 3696,
                                                                    "y": 2192
                                                                },
                                                                "children": []
                                                            },
                                                            {
                                                                "id": "elif-41_41",
                                                                "type": "Rewritable",
                                                                "data": {
                                                                    "label": "elif",
                                                                    "text": "elif"
                                                                },
                                                                "position": {
                                                                    "x": 3952,
                                                                    "y": 2192
                                                                },
                                                                "children": []
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "id": "Циклы-14_14",
                                                        "type": "Rewritable",
                                                        "data": {
                                                            "label": "Циклы",
                                                            "text": "Циклы"
                                                        },
                                                        "position": {
                                                            "x": 4592,
                                                            "y": 1936
                                                        },
                                                        "children": [
                                                            {
                                                                "id": "for-42_42",
                                                                "type": "Rewritable",
                                                                "data": {
                                                                    "label": "for",
                                                                    "text": "for"
                                                                },
                                                                "position": {
                                                                    "x": 4208,
                                                                    "y": 2192
                                                                },
                                                                "children": []
                                                            },
                                                            {
                                                                "id": "while-43_43",
                                                                "type": "Rewritable",
                                                                "data": {
                                                                    "label": "while",
                                                                    "text": "while"
                                                                },
                                                                "position": {
                                                                    "x": 4464,
                                                                    "y": 2192
                                                                },
                                                                "children": []
                                                            },
                                                            {
                                                                "id": "Вложенные циклы-44_44",
                                                                "type": "Rewritable",
                                                                "data": {
                                                                    "label": "Вложенные циклы",
                                                                    "text": "Вложенные циклы"
                                                                },
                                                                "position": {
                                                                    "x": 4720,
                                                                    "y": 2192
                                                                },
                                                                "children": []
                                                            },
                                                            {
                                                                "id": "break и continue-45_45",
                                                                "type": "Rewritable",
                                                                "data": {
                                                                    "label": "break и continue",
                                                                    "text": "break и continue"
                                                                },
                                                                "position": {
                                                                    "x": 4976,
                                                                    "y": 2192
                                                                },
                                                                "children": []
                                                            }
                                                        ]
                                                    }
                                                ]
                                            },
                                            {
                                                "id": "Функции-3_3",
                                                "type": "Rewritable",
                                                "data": {
                                                    "label": "Функции",
                                                    "text": "Функции"
                                                },
                                                "position": {
                                                    "x": 5232,
                                                    "y": 1680
                                                },
                                                "children": [
                                                    {
                                                        "id": "Определение функции-15_15",
                                                        "type": "Rewritable",
                                                        "data": {
                                                            "label": "Определение функции",
                                                            "text": "Определение функции"
                                                        },
                                                        "position": {
                                                            "x": 4848,
                                                            "y": 1936
                                                        },
                                                        "children": []
                                                    },
                                                    {
                                                        "id": "Аргументы функции-16_16",
                                                        "type": "Rewritable",
                                                        "data": {
                                                            "label": "Аргументы функции",
                                                            "text": "Аргументы функции"
                                                        },
                                                        "position": {
                                                            "x": 5104,
                                                            "y": 1936
                                                        },
                                                        "children": []
                                                    },
                                                    {
                                                        "id": "Возвращаемые значения-17_17",
                                                        "type": "Rewritable",
                                                        "data": {
                                                            "label": "Возвращаемые значения",
                                                            "text": "Возвращаемые значения"
                                                        },
                                                        "position": {
                                                            "x": 5360,
                                                            "y": 1936
                                                        },
                                                        "children": []
                                                    },
                                                    {
                                                        "id": "Рекурсия-18_18",
                                                        "type": "Rewritable",
                                                        "data": {
                                                            "label": "Рекурсия",
                                                            "text": "Рекурсия"
                                                        },
                                                        "position": {
                                                            "x": 5616,
                                                            "y": 1936
                                                        },
                                                        "children": []
                                                    }
                                                ]
                                            },
                                            {
                                                "id": "Работа со строками-4_4",
                                                "type": "Rewritable",
                                                "data": {
                                                    "label": "Работа со строками",
                                                    "text": "Работа со строками"
                                                },
                                                "position": {
                                                    "x": 6128,
                                                    "y": 1680
                                                },
                                                "children": [
                                                    {
                                                        "id": "Методы строк-19_19",
                                                        "type": "Rewritable",
                                                        "data": {
                                                            "label": "Методы строк",
                                                            "text": "Методы строк"
                                                        },
                                                        "position": {
                                                            "x": 5872,
                                                            "y": 1936
                                                        },
                                                        "children": []
                                                    },
                                                    {
                                                        "id": "Форматирование строк-20_20",
                                                        "type": "Rewritable",
                                                        "data": {
                                                            "label": "Форматирование строк",
                                                            "text": "Форматирование строк"
                                                        },
                                                        "position": {
                                                            "x": 6128,
                                                            "y": 1936
                                                        },
                                                        "children": []
                                                    },
                                                    {
                                                        "id": "Регулярные выражения-21_21",
                                                        "type": "Rewritable",
                                                        "data": {
                                                            "label": "Регулярные выражения",
                                                            "text": "Регулярные выражения"
                                                        },
                                                        "position": {
                                                            "x": 6384,
                                                            "y": 1936
                                                        },
                                                        "children": []
                                                    }
                                                ]
                                            },
                                            {
                                                "id": "Коллекции-5_5",
                                                "type": "Rewritable",
                                                "data": {
                                                    "label": "Коллекции",
                                                    "text": "Коллекции"
                                                },
                                                "position": {
                                                    "x": 7024,
                                                    "y": 1680
                                                },
                                                "children": [
                                                    {
                                                        "id": "Списки-22_22",
                                                        "type": "Rewritable",
                                                        "data": {
                                                            "label": "Списки",
                                                            "text": "Списки"
                                                        },
                                                        "position": {
                                                            "x": 6640,
                                                            "y": 1936
                                                        },
                                                        "children": []
                                                    },
                                                    {
                                                        "id": "Кортежи-23_23",
                                                        "type": "Rewritable",
                                                        "data": {
                                                            "label": "Кортежи",
                                                            "text": "Кортежи"
                                                        },
                                                        "position": {
                                                            "x": 6896,
                                                            "y": 1936
                                                        },
                                                        "children": []
                                                    },
                                                    {
                                                        "id": "Множества-24_24",
                                                        "type": "Rewritable",
                                                        "data": {
                                                            "label": "Множества",
                                                            "text": "Множества"
                                                        },
                                                        "position": {
                                                            "x": 7152,
                                                            "y": 1936
                                                        },
                                                        "children": []
                                                    },
                                                    {
                                                        "id": "Словари-25_25",
                                                        "type": "Rewritable",
                                                        "data": {
                                                            "label": "Словари",
                                                            "text": "Словари"
                                                        },
                                                        "position": {
                                                            "x": 7408,
                                                            "y": 1936
                                                        },
                                                        "children": []
                                                    }
                                                ]
                                            },
                                            {
                                                "id": "Работа с файлами-6_6",
                                                "type": "Rewritable",
                                                "data": {
                                                    "label": "Работа с файлами",
                                                    "text": "Работа с файлами"
                                                },
                                                "position": {
                                                    "x": 7792,
                                                    "y": 1680
                                                },
                                                "children": [
                                                    {
                                                        "id": "Чтение файла-26_26",
                                                        "type": "Rewritable",
                                                        "data": {
                                                            "label": "Чтение файла",
                                                            "text": "Чтение файла"
                                                        },
                                                        "position": {
                                                            "x": 7664,
                                                            "y": 1936
                                                        },
                                                        "children": []
                                                    },
                                                    {
                                                        "id": "Запись в файл-27_27",
                                                        "type": "Rewritable",
                                                        "data": {
                                                            "label": "Запись в файл",
                                                            "text": "Запись в файл"
                                                        },
                                                        "position": {
                                                            "x": 7920,
                                                            "y": 1936
                                                        },
                                                        "children": []
                                                    }
                                                ]
                                            },
                                            {
                                                "id": "Элементы функционального программирования-7_7",
                                                "type": "Rewritable",
                                                "data": {
                                                    "label": "Элементы функционального программирования",
                                                    "text": "Элементы функционального программирования"
                                                },
                                                "position": {
                                                    "x": 8432,
                                                    "y": 1680
                                                },
                                                "children": [
                                                    {
                                                        "id": "Lambda-функции-28_28",
                                                        "type": "Rewritable",
                                                        "data": {
                                                            "label": "Lambda-функции",
                                                            "text": "Lambda-функции"
                                                        },
                                                        "position": {
                                                            "x": 8176,
                                                            "y": 1936
                                                        },
                                                        "children": []
                                                    },
                                                    {
                                                        "id": "Функции высшего порядка-29_29",
                                                        "type": "Rewritable",
                                                        "data": {
                                                            "label": "Функции высшего порядка",
                                                            "text": "Функции высшего порядка"
                                                        },
                                                        "position": {
                                                            "x": 8432,
                                                            "y": 1936
                                                        },
                                                        "children": []
                                                    },
                                                    {
                                                        "id": "List Comprehensions-30_30",
                                                        "type": "Rewritable",
                                                        "data": {
                                                            "label": "List Comprehensions",
                                                            "text": "List Comprehensions"
                                                        },
                                                        "position": {
                                                            "x": 8688,
                                                            "y": 1936
                                                        },
                                                        "children": []
                                                    }
                                                ]
                                            },
                                            {
                                                "id": "Обработка исключений-8_8",
                                                "type": "Rewritable",
                                                "data": {
                                                    "label": "Обработка исключений",
                                                    "text": "Обработка исключений"
                                                },
                                                "position": {
                                                    "x": 9072,
                                                    "y": 1680
                                                },
                                                "children": [
                                                    {
                                                        "id": "try-except-31_31",
                                                        "type": "Rewritable",
                                                        "data": {
                                                            "label": "try-except",
                                                            "text": "try-except"
                                                        },
                                                        "position": {
                                                            "x": 8944,
                                                            "y": 1936
                                                        },
                                                        "children": []
                                                    },
                                                    {
                                                        "id": "finally-32_32",
                                                        "type": "Rewritable",
                                                        "data": {
                                                            "label": "finally",
                                                            "text": "finally"
                                                        },
                                                        "position": {
                                                            "x": 9200,
                                                            "y": 1936
                                                        },
                                                        "children": []
                                                    }
                                                ]
                                            },
                                            {
                                                "id": "Модули и пакеты-9_9",
                                                "type": "Rewritable",
                                                "data": {
                                                    "label": "Модули и пакеты",
                                                    "text": "Модули и пакеты"
                                                },
                                                "position": {
                                                    "x": 9584,
                                                    "y": 1680
                                                },
                                                "children": [
                                                    {
                                                        "id": "Импорт модулей-33_33",
                                                        "type": "Rewritable",
                                                        "data": {
                                                            "label": "Импорт модулей",
                                                            "text": "Импорт модулей"
                                                        },
                                                        "position": {
                                                            "x": 9456,
                                                            "y": 1936
                                                        },
                                                        "children": []
                                                    },
                                                    {
                                                        "id": "Создание модулей-34_34",
                                                        "type": "Rewritable",
                                                        "data": {
                                                            "label": "Создание модулей",
                                                            "text": "Создание модулей"
                                                        },
                                                        "position": {
                                                            "x": 9712,
                                                            "y": 1936
                                                        },
                                                        "children": []
                                                    }
                                                ]
                                            },
                                            {
                                                "id": "Работа с библиотеками-10_10",
                                                "type": "Rewritable",
                                                "data": {
                                                    "label": "Работа с библиотеками",
                                                    "text": "Работа с библиотеками"
                                                },
                                                "position": {
                                                    "x": 10096,
                                                    "y": 1680
                                                },
                                                "children": [
                                                    {
                                                        "id": "Пример: NumPy-35_35",
                                                        "type": "Rewritable",
                                                        "data": {
                                                            "label": "Пример: NumPy",
                                                            "text": "Пример: NumPy"
                                                        },
                                                        "position": {
                                                            "x": 9968,
                                                            "y": 1936
                                                        },
                                                        "children": []
                                                    },
                                                    {
                                                        "id": "Пример: Pandas-36_36",
                                                        "type": "Rewritable",
                                                        "data": {
                                                            "label": "Пример: Pandas",
                                                            "text": "Пример: Pandas"
                                                        },
                                                        "position": {
                                                            "x": 10224,
                                                            "y": 1936
                                                        },
                                                        "children": []
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                }
            ]
        }
    }
}